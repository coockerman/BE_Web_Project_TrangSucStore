using Google.Cloud.Firestore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using BEWebPNJ.Models;

namespace BEWebPNJ.Services
{
    public class RevenueService
    {
        private readonly FirestoreDb _firestoreDb;
        private const string CollectionName = "Orders"; // T√™n collection tr√™n Firestore

        public RevenueService(FirestoreDb firestoreDb)
        {
            _firestoreDb = firestoreDb;
        }

        // üîπ T√≠nh doanh thu trong tu·∫ßn
        public async Task<double> GetWeeklyRevenue()
        {
            try
            {
                DateTime startOfWeek = DateTime.UtcNow.AddHours(7).StartOfWeek(DayOfWeek.Monday);
                DateTime endOfWeek = startOfWeek.AddDays(7);

                QuerySnapshot snapshot = await _firestoreDb.Collection(CollectionName)
                    .WhereGreaterThanOrEqualTo("timeOrder", startOfWeek)
                    .WhereLessThan("timeOrder", endOfWeek)
                    .GetSnapshotAsync();

                return snapshot.Documents
                    .Where(doc => doc.Exists)
                    .Select(doc => doc.ConvertTo<Order>())
                    .Where(order => order.status != "process")
                    .Sum(order => order.totalAmount);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"L·ªói khi t√≠nh doanh thu tu·∫ßn: {ex.Message}");
                return 0;
            }
        }

        // üîπ T√≠nh doanh thu trong th√°ng
        public async Task<double> GetMonthlyRevenue()
        {
            try
            {
                DateTime startOfMonth = new DateTime(DateTime.UtcNow.AddHours(7).Year, DateTime.UtcNow.AddHours(7).Month, 1);
                DateTime endOfMonth = startOfMonth.AddMonths(1).AddSeconds(-1); // L·∫•y ng√†y cu·ªëi th√°ng ch√≠nh x√°c (23:59:59)

                // Chuy·ªÉn ƒë·ªïi DateTime th√†nh Firestore Timestamp
                var startOfMonthTimestamp = Timestamp.FromDateTime(startOfMonth.ToUniversalTime());
                var endOfMonthTimestamp = Timestamp.FromDateTime(endOfMonth.ToUniversalTime());

                Console.WriteLine($"Start of Month: {startOfMonth}");
                Console.WriteLine($"End of Month: {endOfMonth}");

                QuerySnapshot snapshot = await _firestoreDb.Collection(CollectionName)
                    .WhereGreaterThanOrEqualTo("timeOrder", startOfMonthTimestamp)
                    .WhereLessThan("timeOrder", endOfMonthTimestamp)
                    .GetSnapshotAsync();

                return snapshot.Documents
                   .Where(doc => doc.Exists)
                   .Select(doc => doc.ConvertTo<Order>())
                   .Where(order => order.status != "process")
                   .Sum(order => order.totalAmount);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"L·ªói khi t√≠nh doanh thu th√°ng: {ex.Message}");
                return 0;
            }
        }

        // üîπ T√≠nh doanh thu trong qu√Ω
        public async Task<double> GetQuarterlyRevenue()
        {
            try
            {
                // X√°c ƒë·ªãnh th·ªùi gian b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c c·ªßa qu√Ω
                DateTime startOfQuarter = GetStartOfQuarter(DateTime.UtcNow.AddHours(7));
                DateTime endOfQuarter = startOfQuarter.AddMonths(3).AddSeconds(-1); // L·∫•y th·ªùi gian cu·ªëi c·ªßa qu√Ω

                // Chuy·ªÉn ƒë·ªïi DateTime th√†nh Firestore Timestamp
                var startOfQuarterTimestamp = Timestamp.FromDateTime(startOfQuarter.ToUniversalTime());
                var endOfQuarterTimestamp = Timestamp.FromDateTime(endOfQuarter.ToUniversalTime());

                Console.WriteLine($"Start of Quarter: {startOfQuarter}");
                Console.WriteLine($"End of Quarter: {endOfQuarter}");

                // Truy v·∫•n Firestore
                QuerySnapshot snapshot = await _firestoreDb.Collection(CollectionName)
                    .WhereGreaterThanOrEqualTo("timeOrder", startOfQuarterTimestamp)
                    .WhereLessThan("timeOrder", endOfQuarterTimestamp)
                    .GetSnapshotAsync();

                // T√≠nh t·ªïng doanh thu t·ª´ c√°c ƒë∆°n h√†ng trong qu√Ω
                return snapshot.Documents
                   .Where(doc => doc.Exists)
                   .Select(doc => doc.ConvertTo<Order>())
                   .Where(order => order.status != "process")
                   .Sum(order => order.totalAmount);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"L·ªói khi t√≠nh doanh thu qu√Ω: {ex.Message}");
                return 0;
            }
        }

        // üîπ T√≠nh doanh thu trong nƒÉm
        public async Task<double> GetYearlyRevenue()
        {
            try
            {
                DateTime startOfYear = new DateTime(DateTime.UtcNow.AddHours(7).Year, 1, 1);
                DateTime endOfYear = new DateTime(DateTime.UtcNow.AddHours(7).Year, 12, 31, 23, 59, 59); // ƒê·∫øn ng√†y cu·ªëi nƒÉm

                // Chuy·ªÉn ƒë·ªïi DateTime th√†nh Firestore Timestamp
                var startOfYearTimestamp = Timestamp.FromDateTime(startOfYear.ToUniversalTime());
                var endOfYearTimestamp = Timestamp.FromDateTime(endOfYear.ToUniversalTime());

                Console.WriteLine($"Start of Year: {startOfYear}");
                Console.WriteLine($"End of Year: {endOfYear}");

                // Truy v·∫•n Firestore
                QuerySnapshot snapshot = await _firestoreDb.Collection(CollectionName)
                    .WhereGreaterThanOrEqualTo("timeOrder", startOfYearTimestamp)
                    .WhereLessThan("timeOrder", endOfYearTimestamp)
                    .GetSnapshotAsync();

                // T√≠nh t·ªïng doanh thu t·ª´ c√°c ƒë∆°n h√†ng trong nƒÉm
                return snapshot.Documents
                   .Where(doc => doc.Exists)
                   .Select(doc => doc.ConvertTo<Order>())
                   .Where(order => order.status != "process")
                   .Sum(order => order.totalAmount);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"L·ªói khi t√≠nh doanh thu nƒÉm: {ex.Message}");
                return 0;
            }
        }

        // üîπ H·ªó tr·ª£ l·∫•y th·ªùi gian b·∫Øt ƒë·∫ßu c·ªßa qu√Ω
        private DateTime GetStartOfQuarter(DateTime date)
        {
            int quarter = (date.Month - 1) / 3 + 1;
            int startMonth = (quarter - 1) * 3 + 1;
            return new DateTime(date.Year, startMonth, 1);
        }
    }

    // Extension method ƒë·ªÉ t√≠nh th·ªùi gian b·∫Øt ƒë·∫ßu c·ªßa tu·∫ßn
    public static class DateTimeExtensions
    {
        public static DateTime StartOfWeek(this DateTime dateTime, DayOfWeek startOfWeek)
        {
            int diff = dateTime.DayOfWeek - startOfWeek;
            if (diff < 0)
            {
                diff += 7;
            }
            return dateTime.AddDays(-diff).Date;
        }
    }
}
